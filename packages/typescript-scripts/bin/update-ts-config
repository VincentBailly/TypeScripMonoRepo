#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const prettier = require("prettier");

function isWorkspaceDependency(location) {
  return location.indexOf("node_modules") === -1;
}

function isCompositePackage(location) {
  try {
    const config = require(path.join(location, "tsconfig.json"));
    return config.compilerOptions && config.compilerOptions.composite;
  } catch {
    return false;
  }
}

function findPackageLocation(name, searchPath) {
  return path.dirname(
    require.resolve(path.join(name, "package.json"), { paths: [process.cwd()] })
  );
}

function getPackageDirectDependenciesNames(l) {
  const packageJson = require(path.join(l, "package.json"));
  const dependencies = Object.keys(packageJson.dependencies || []);
  const devDependencies = Object.keys(packageJson.devDependencies || []);
  dependencies.splice(0, 0, ...devDependencies);
  return dependencies;
}

function getPackageDirectDependencies(loc) {
  return getPackageDirectDependenciesNames(loc).map(name => {
    const location = findPackageLocation(name, loc);
    return { location, name };
  });
}

function getTsPackageDependencies(loc) {
  const TsDependencies = getPackageDirectDependencies(loc).filter(
    p => isCompositePackage(p.location) && isWorkspaceDependency(p.location)
  );
  return TsDependencies.sort((a, b) => a.location.localeCompare(b.location));
}

function getTsPackageDependenciesForCurrentPackage() {
  return getTsPackageDependencies(process.cwd());
}

function updateTsConfig() {
  let tsconfig = {};
  try {
    tsconfig = require(path.join(process.cwd(), "tsconfig.json"));
  } catch {
    return;
  }
  if (tsconfig.compilerOptions.composite !== false) {
    tsconfig.compilerOptions.composite = true;
  }

  tsconfig.references = getTsPackageDependenciesForCurrentPackage().map(p => ({
    path: path
      .relative(process.cwd(), path.join(p.location, "tsconfig.json"))
      .replace(/\\/g, "/")
  }));
  if (tsconfig.references.length === 0) {
    delete tsconfig.references;
  }

  const formattedConfig = prettier.format(JSON.stringify(tsconfig), {
    parser: "json"
  });
  fs.writeFileSync(`./tsconfig.json`, formattedConfig);
}

updateTsConfig();
